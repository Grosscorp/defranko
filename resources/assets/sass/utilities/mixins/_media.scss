@mixin respond-to($media) {
	@if $media == handhelds {
		@media only screen and (max-width: 479px) { @content; }
	}
	@else if $media == wide-handhelds {
		@media only screen and (min-width: 480px) and (max-width: 767px) { @content; }
	}
	@else if $media == tablets {
		@media only screen and (min-width: 768px) and (max-width: 959px) { @content; }
	}
}


//@media (max-width: 640px) { body {font-size:1.2rem;} }
//@media (min-width: 640px) { body {font-size:1rem;} }
//@media (min-width:960px) { body {font-size:1.2rem;} }
//@media (min-width:1100px) { body {font-size:1.5rem;} }







///
/// Viewport sized typography with minimum and maximum values
///
/// @author Eduardo Boucas (@eduardoboucas)
///
/// @param {Number}   $responsive  - Viewport-based size
/// @param {Number}   $min         - Minimum font size (px)
/// @param {Number}   $max         - Maximum font size (px)
///                                  (optional)
/// @param {Number}   $fallback    - Fallback for viewport-
///                                  based units (optional)
///
/// @example scss - 5vw font size (with 50px fallback),
///                 minumum of 35px and maximum of 150px
///  @include responsive-font(5vw, 35px, 150px, 50px);
///
@mixin responsive-font($responsive, $min, $max: false, $fallback: false) {
	$responsive-unitless: $responsive / ($responsive - $responsive + 1);
	$dimension: if(unit($responsive) == 'vh', 'height', 'width');
	$min-breakpoint: $min / $responsive-unitless * 100;

	@media (max-#{$dimension}: #{$min-breakpoint}) {
		font-size: $min;
	}

	@if $max {
		$max-breakpoint: $max / $responsive-unitless * 100;

		@media (min-#{$dimension}: #{$max-breakpoint}) {
			font-size: $max;
		}
	}

	@if $fallback {
		font-size: $fallback;
	}

	font-size: $responsive;
}